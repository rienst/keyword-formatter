{"version":3,"sources":["components/KeywordFormatter.js","Site.js","index.js"],"names":["KeywordFormatter","useState","input","setInput","bmm","setBmm","em","setEm","output","setOutput","useEffect","keywords","getKeywords","bmmKeywords","getBmmKeywords","emKeywords","getEmKeywords","formattedKeywords","concat","getOutput","split","filter","keyword","forEach","words","bmmKeyword","word","trim","push","emKeyword","className","id","rows","onChange","e","target","value","type","checked","htmlFor","readOnly","onClick","outputField","document","querySelector","select","setSelectionRange","execCommand","Site","ReactDOM","render","getElementById"],"mappings":"sLA+IeA,EA7IU,WAAO,IAAD,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,OAEPF,oBAAS,GAFF,mBAEtBG,EAFsB,KAEjBC,EAFiB,OAGTJ,oBAAS,GAHA,mBAGtBK,EAHsB,KAGlBC,EAHkB,OAIDN,mBAAS,IAJR,mBAItBO,EAJsB,KAIdC,EAJc,KAM7BC,qBAAU,WACR,IAAMC,EAAWC,EAAYV,GACvBW,EAAcC,EAAeH,GAC7BI,EAAaC,EAAcL,GAE7BM,EAAoB,GAExBA,GADAA,EAAoBA,EAAkBC,OAAOL,IACPK,OAAOH,GAE7C,IAAMP,EAASW,EAAUF,GAEzBR,EAAUD,KAET,CAACN,EAAOE,EAAKE,IAEhB,IAAMM,EAAc,SAACV,GACnB,IAAIS,EAAWT,EAAMkB,MAAM,UAM3B,OAJAT,EAAWA,EAASU,QAAO,SAACC,GAC1B,MAAmB,KAAZA,MAMLR,EAAiB,SAACH,GACtB,IAAIE,EAAc,GAelB,OAbAF,EAASY,SAAQ,SAACD,GAChB,IAAME,EAAQF,EAAQF,MAAM,KACxBK,EAAa,GAEjBD,EAAMD,SAAQ,SAACG,GACbD,GAAU,WAAQC,EAAR,QAGZD,EAAaA,EAAWE,OAExBd,EAAYe,KAAKH,MAGZrB,EAAMS,EAAc,IAGvBG,EAAgB,SAACL,GACrB,IAAII,EAAa,GAQjB,OANAJ,EAASY,SAAQ,SAACD,GAChB,IAAMO,EAAS,WAAOP,EAAP,KAEfP,EAAWa,KAAKC,MAGXvB,EAAKS,EAAa,IAGrBI,EAAY,SAACR,GACjB,IAAIH,EAAS,GAQb,OANAG,EAASY,SAAQ,SAACD,GAChBd,GAAM,UAAOc,EAAP,SAGRd,EAASA,EAAOmB,QAYlB,OACE,yBAAKG,UAAU,oBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,MAAd,YACA,8BACEA,UAAU,eACVC,GAAG,QACHC,KAAK,KACLC,SAAU,SAACC,GAAD,OAAO/B,EAAS+B,EAAEC,OAAOC,QACnCA,MAAOlC,KAGX,yBAAK4B,UAAU,yBACb,wBAAIA,UAAU,MAAd,eACA,yBAAKA,UAAU,mBACb,2BACEO,KAAK,WACLP,UAAU,mBACVC,GAAG,MACHE,SAAU,SAACC,GAAD,OAAO7B,EAAO6B,EAAEC,OAAOG,UACjCA,QAASlC,IAEX,2BAAO0B,UAAU,mBAAmBS,QAAQ,OAA5C,yBAIF,yBAAKT,UAAU,cACb,2BACEO,KAAK,WACLP,UAAU,mBACVC,GAAG,KACHE,SAAU,SAACC,GAAD,OAAO3B,EAAM2B,EAAEC,OAAOG,UAChCA,QAAShC,IAEX,2BAAOwB,UAAU,mBAAmBS,QAAQ,MAA5C,iBAKJ,yBAAKT,UAAU,YACb,wBAAIA,UAAU,MAAd,UACA,yBAAKA,UAAU,qBACb,8BACEU,UAAU,EACVV,UAAU,eACVC,GAAG,SACHC,KAAK,KACLI,MAAO5B,IAET,4BAAQsB,UAAU,cAAcW,QAzDV,WAC9B,IAAMC,EAAcC,SAASC,cAAc,WAC3CF,EAAYG,SACZH,EAAYI,kBAAkB,EAAG,OACjCH,SAASI,YAAY,UAqDb,aCtHGC,EAXF,WACX,OACE,yBAAKlB,UAAU,QACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,QAAd,4CACA,kBAAC,EAAD,SCLRmB,IAASC,OAAO,kBAAC,EAAD,MAAUP,SAASQ,eAAe,U","file":"static/js/main.6cee716f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst KeywordFormatter = () => {\n  const [input, setInput] = useState('')\n  const [bmm, setBmm] = useState(true)\n  const [em, setEm] = useState(true)\n  const [output, setOutput] = useState('')\n\n  useEffect(() => {\n    const keywords = getKeywords(input)\n    const bmmKeywords = getBmmKeywords(keywords)\n    const emKeywords = getEmKeywords(keywords)\n\n    let formattedKeywords = []\n    formattedKeywords = formattedKeywords.concat(bmmKeywords)\n    formattedKeywords = formattedKeywords.concat(emKeywords)\n\n    const output = getOutput(formattedKeywords)\n\n    setOutput(output)\n    //eslint-disable-next-line\n  }, [input, bmm, em])\n\n  const getKeywords = (input) => {\n    let keywords = input.split(/\\r?\\n/g)\n\n    keywords = keywords.filter((keyword) => {\n      return keyword !== ''\n    })\n\n    return keywords\n  }\n\n  const getBmmKeywords = (keywords) => {\n    let bmmKeywords = []\n\n    keywords.forEach((keyword) => {\n      const words = keyword.split(' ')\n      let bmmKeyword = []\n\n      words.forEach((word) => {\n        bmmKeyword += `+${word} `\n      })\n\n      bmmKeyword = bmmKeyword.trim()\n\n      bmmKeywords.push(bmmKeyword)\n    })\n\n    return bmm ? bmmKeywords : []\n  }\n\n  const getEmKeywords = (keywords) => {\n    let emKeywords = []\n\n    keywords.forEach((keyword) => {\n      const emKeyword = `[${keyword}]`\n\n      emKeywords.push(emKeyword)\n    })\n\n    return em ? emKeywords : []\n  }\n\n  const getOutput = (keywords) => {\n    let output = ''\n\n    keywords.forEach((keyword) => {\n      output += `${keyword}\\n`\n    })\n\n    output = output.trim()\n\n    return output\n  }\n\n  const copyKeywordsToClipboard = () => {\n    const outputField = document.querySelector('#output')\n    outputField.select()\n    outputField.setSelectionRange(0, 99999)\n    document.execCommand('copy')\n  }\n\n  return (\n    <div className=\"KeywordFormatter\">\n      <div className=\"row\">\n        <div className=\"col-lg-5 mb-5 mb-lg-0\">\n          <h2 className=\"h5\">Keywords</h2>\n          <textarea\n            className=\"form-control\"\n            id=\"input\"\n            rows=\"10\"\n            onChange={(e) => setInput(e.target.value)}\n            value={input}\n          />\n        </div>\n        <div className=\"col-lg-2 mb-5 mb-lg-0\">\n          <h2 className=\"h5\">Match types</h2>\n          <div className=\"mb-2 form-check\">\n            <input\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              id=\"bmm\"\n              onChange={(e) => setBmm(e.target.checked)}\n              checked={bmm}\n            />\n            <label className=\"form-check-label\" htmlFor=\"bmm\">\n              Broad match modifier\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <input\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              id=\"em\"\n              onChange={(e) => setEm(e.target.checked)}\n              checked={em}\n            />\n            <label className=\"form-check-label\" htmlFor=\"em\">\n              Exact match\n            </label>\n          </div>\n        </div>\n        <div className=\"col-lg-5\">\n          <h2 className=\"h5\">Output</h2>\n          <div className=\"position-relative\">\n            <textarea\n              readOnly={true}\n              className=\"form-control\"\n              id=\"output\"\n              rows=\"10\"\n              value={output}\n            ></textarea>\n            <button className=\"copy-button\" onClick={copyKeywordsToClipboard}>\n              Copy\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default KeywordFormatter\n","import React from 'react'\nimport './scss/main.scss'\nimport KeywordFormatter from './components/KeywordFormatter'\n\nconst Site = () => {\n  return (\n    <div className=\"Site\">\n      <div className=\"container py-5\">\n        <h1 className=\"mb-5\">Small and simple keyword formatting tool</h1>\n        <KeywordFormatter />\n      </div>\n    </div>\n  )\n}\n\nexport default Site\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Site from './Site'\n\nReactDOM.render(<Site />, document.getElementById('root'))\n"],"sourceRoot":""}